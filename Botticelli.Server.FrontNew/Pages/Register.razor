@page "/register"
@using Botticelli.Server.FrontNew.Models
@using Botticelli.Server.FrontNew.Clients
@inject SessionClient SessionClient;
@inject NavigationManager UriHelper;
@inject CookieStorageAccessor Cookies;

@code
{
    private readonly Error _error = new()
    {
        UserMessage = string.Empty
    };
}

<PageTitle>RegisterUser</PageTitle>

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="5px">
                    <RadzenLabel Text="Email:"/>
                    <InputText @bind-Value="_model.Email" class="form-control"/>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="5px">
                    <RadzenLabel Text="Password:"/>
                    <RadzenPassword @bind-Value="_model.Password" class="form-control" />
                </RadzenStack>
            </RadzenStack>
            <RadzenButton Text="Submit" ButtonType="ButtonType.Submit" />
            <ValidationMessage For="@(() => _model.Email)" />
            <ValidationMessage For="@(() => _model.Password)" />
        </EditForm>
        <RadzenLabel @bind-text="@_error.UserMessage" Style="color: red; font-weight: bold"/>

        @code
        {
            private readonly RegisterUser _model = new();

            public async Task OnValidSubmit()
            {
                var result = await SessionClient.RegisterUser(_model.Email, _model.Password);
                if (result.Code == 0)
                    UriHelper.NavigateTo("/your_bots", true);
            }
        }

    </RadzenStack>
</RadzenCard>