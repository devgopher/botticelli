@page "/your_bots"
@using Botticelli.Server.Data.Entities
@using Botticelli.Server.FrontNew.Clients
@using Botticelli.Server.FrontNew.Settings
@using Botticelli.Shared.API.Admin.Responses
@using Flurl
@using Microsoft.Extensions.Options
@using System.Net.Http.Headers
@using Botticelli.Shared.Constants
@inject NavigationManager uriHelper;
@inject IOptionsMonitor<BackSettings> backSettings;
@inject SessionClient _sessionClient;
@inject SessionClient _client;


<PageTitle>Your bots</PageTitle>

<h1>Bot list</h1>

@if (_bots == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        @*        <thead>
        <tr>
            <th>Bot name</th>
            <th>Bot id</th>
            <th>Bot type</th>
            <th>Bot status</th>
            <th>Last KeepAlive</th>
            <th>Is alive?</th>
            <th>Start/stop</th>
        </tr>
        </thead>*@
        <tbody>

        @foreach (var botGroup in _bots.Chunk(3))
        {
            <tr>
                @foreach (var bot in botGroup)
                {
                    <td id="tr_@bot.BotId" style="background-color: @GetColor(bot); border-width: 1px">
                        @bot.BotName <br>
                        <img src="@GetLogo(bot.Type)" height="32px" width="32px"/><br/>
                        @GetIsAlive(bot.LastKeepAlive)<br/>
                        <button @onclick="@(e => SendStartStop(bot.BotId, bot.Status))">Start/stop</button>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>

    <button @onclick="@(e => uriHelper.NavigateTo("/add_bot", true))">New Bot</button>
}

@code {

    private BotInfo[]? _bots;
    HttpClient Http;

    protected override bool ShouldRender() => true;

    protected override async Task OnInitializedAsync()
    {
        var session = _sessionClient.GetSession();
        Http = HttpClientFactory.Create();
        Http.BaseAddress = new Uri(backSettings.CurrentValue.BackUrl);
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", session?.Token);
        _bots = await Http.GetFromJsonAsync<BotInfo?[]>("/admin/GetBots");
    }

    protected async Task SendStartStop(string botId, BotStatus? status)
    {
        if (status != BotStatus.Active) await Http.GetAsync($"/admin/ActivateBot?botId={botId}");
        else await Http.GetAsync($"/admin/DeactivateBot?botId={botId}");

        uriHelper.NavigateTo("/your_bots", true);
    }

    private static string GetIsAlive(DateTime? lastKeepAlive)
            => DateTime.UtcNow - lastKeepAlive <= TimeSpan.FromSeconds(30) ? "Yes" : "No";


    private string GetLogo(BotType? type) => type switch
    {
            BotType.Telegram => "Logos/Telegram.png",
            BotType.WhatsApp => "Logos/Whatsapp.png",
            BotType.Viber => "Logos/Viber.png",
            BotType.RocketChat => "Logos/RocketChat.png",
            BotType.Signal => "Logos/Signal.png",
            BotType.Unknown => "Logos/Unknown.png",
            _ => "Logos/Unknown.png"
            };


    private string GetColor(BotInfo bot) => bot.Status switch
    {
            BotStatus.Active    => GetIsAlive(bot.LastKeepAlive) == "Yes" ? "green" : "gainsboro",
            BotStatus.NonActive => GetIsAlive(bot.LastKeepAlive) == "No" ? "red" : "gainsboro",
            _                   => "gray"
            };

}