@page "/your_bots"
@using Botticelli.Server.Data.Entities
@using Botticelli.Shared.API.Admin.Responses
@using Botticelli.Shared.Constants
@using Microsoft.Extensions.Options
@using Botticelli.Server.FrontNew.Settings
@using System.Net.Http.Headers
@inject NavigationManager UriHelper;
@inject IOptionsMonitor<BackSettings> BackSettings;
@inject CookieStorageAccessor Cookies;
@inject IJSRuntime JsRuntime;

@code {
    private string _error = string.Empty;
}

<PageTitle>Your bots</PageTitle>

<h1>Bot list</h1>

@if (_bots == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" Gap="20px">

        @foreach (var botGroup in _bots.Chunk(5))
        {
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="40px">
                @foreach (var bot in botGroup)
                {
                    <RadzenCard Style="@(GetStyle(bot))">
                        <RadzenStack Gap="5px" JustifyContent="JustifyContent.Center">
                            <RadzenImage Path="@GetLogo(bot.Type)" Style="align-content: center; height: 100px; width: 100px;"/>
                        </RadzenStack>
                        <RadzenStack Gap="10px">
                            <RadzenText TextStyle="TextStyle.Overline" Text="@bot.BotName"/>
                            @*<RadzenText TextStyle="TextStyle.Overline" Text="@bot.BotId"/>*@
                            <RadzenText TextStyle="TextStyle.Body2" Text="@GetIsAlive(bot.LastKeepAlive)"/>
                            <RadzenText TextStyle="TextStyle.Body2" Text="@GetIsActive(bot.Status)"/>
                            <RadzenButton Click="@(e => SendStartStop(bot.BotId, bot.Status))" Text="Start/Stop"/>
                            <RadzenButton Click="@(e => RemoveBot(bot.BotId))" Text="Remove"/>
                        </RadzenStack>
                    </RadzenCard>
                }
            </RadzenStack>
        }
    </RadzenStack>

   @*<RadzenLabel @bind-text="@_error" Style="color: red; font-weight: bold" />*@

    <RadzenButton Click="@(e => UriHelper.NavigateTo("/add_bot", true))"
                  ButtonStyle="ButtonStyle.Primary"
                  Style="width: 100%"
                  Text="Add bot"/>
}

@code {

    private BotInfo[]? _bots;
    HttpClient _http;

    protected override bool ShouldRender() => true;

    protected override async Task OnInitializedAsync()
    {
        var sessionToken = await Cookies.GetValueAsync("SessionToken");

        _error = $"token:{sessionToken}";

        try
        {
            _http = HttpClientFactory.Create();
            _http.BaseAddress = new Uri(BackSettings.CurrentValue.BackUrl);
            _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", sessionToken);
            _bots = await _http.GetFromJsonAsync<BotInfo?[]>("/admin/GetBots");
        }
        catch (Exception ex)
        {
            _error = $"token:{sessionToken} ex:{ex.Message}";
        }
    }

    private async Task RemoveBot(string botId)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", new object[] {"Are you sure?"}))
            return;

        await _http.GetAsync($"/admin/RemoveBot?botId={botId}");
        UriHelper.NavigateTo("/your_bots", true);
    }

    protected async Task SendStartStop(string botId, BotStatus? status)
    {
        if (status != BotStatus.Active) await _http.GetAsync($"/admin/ActivateBot?botId={botId}");
        else await _http.GetAsync($"/admin/DeactivateBot?botId={botId}");

        UriHelper.NavigateTo("/your_bots", true);
    }

    private static string GetIsActive(BotStatus? status) => status switch
    {
            BotStatus.Active    => "Active",
            BotStatus.NonActive => "Not active",
            _                   => "Unknown"
            };

    private static string GetIsAlive(DateTime? lastKeepAlive)
            => DateTime.UtcNow - lastKeepAlive <= TimeSpan.FromSeconds(30) ? "Alive" : "Dead";


    private string GetLogo(BotType? type) => type switch
    {
            BotType.Telegram => "Logos/Telegram.png",
            BotType.WhatsApp => "Logos/Whatsapp.png",
            BotType.Viber => "Logos/Viber.png",
            BotType.RocketChat => "Logos/RocketChat.png",
            BotType.Signal => "Logos/Signal.png",
            BotType.Unknown => "Logos/Unknown.png",
            _ => "Logos/Unknown.png"
            };


    private string GetStyle(BotInfo bot) => bot.Status switch
    {
            BotStatus.Active => $"width: 200px; background-color: {(GetIsAlive(bot.LastKeepAlive) == "Alive" ? "greenyellow" : "gainsboro")}",
            BotStatus.NonActive => "width: 200px; background-color: red",
            _ => "width: 200px; background-color: gray"
            };

}